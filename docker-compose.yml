version: '3.9'

services:
  # Обратный прокси
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/vhost.d:/etc/nginx/vhost.d
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - backend

  # Companion – автоматический SSL
  acme-companion:
    image: nginxproxy/acme-companion:latest
    container_name: acme-companion
    restart: always
    depends_on:
      - nginx-proxy
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./nginx/vhost.d:/etc/nginx/vhost.d
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/certs:/etc/nginx/certs
    networks:
      - backend

  # Web Application
  webapp:
    image: elenasoshina/web_studio:latest
    container_name: webapp
    build:
      context: .
      target: production
      args:
        BASE_PATH: /
        EMAILJS_SERVICE_ID: ${EMAILJS_SERVICE_ID}
        EMAILJS_TEMPLATE_ID: ${EMAILJS_TEMPLATE_ID}
        EMAILJS_PUBLIC_KEY: ${EMAILJS_PUBLIC_KEY}
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    expose:
      - "80"
    networks:
      - backend

networks:
  backend:
    name: ${BACKEND_NETWORK:-web_studio_network}
    driver: bridge
