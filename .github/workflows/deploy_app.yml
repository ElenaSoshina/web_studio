name: Deploy Web Studio

on:
  push:
    branches: [ main ]        # автоматический деплой
  workflow_dispatch:          # запуск вручную

env:
  BACKEND_NETWORK:  ${{ secrets.BACKEND_NETWORK }}
  VIRTUAL_HOST:     ${{ secrets.VIRTUAL_HOST }}
  LETSENCRYPT_HOST: ${{ secrets.LETSENCRYPT_HOST }}
  LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Копируем конфигурационные файлы на сервер
      - name: Copy nginx configuration to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key:      ${{ secrets.SERVER_SSH_KEY }}
          port:     22
          source:   docker/docker-compose-nginx.yml,nginx/
          target:   /docker
          strip_components: 0

      # Устанавливаем Nginx и ACME Companion
      - name: Setup Nginx and SSL
        uses: appleboy/ssh-action@master
        env:
          BACKEND_NETWORK:  ${{ env.BACKEND_NETWORK }}
          LETSENCRYPT_EMAIL: ${{ env.LETSENCRYPT_EMAIL }}
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key:      ${{ secrets.SERVER_SSH_KEY }}
          port:     22
          envs: |
            BACKEND_NETWORK,
            LETSENCRYPT_EMAIL
          script: |
            set -euo pipefail
            cd /docker
            
            # Проверяем существование сети безопасным способом
            echo "--- Checking if network ${BACKEND_NETWORK} exists ---"
            if ! docker network inspect "${BACKEND_NETWORK}" &>/dev/null; then
              echo "--- Creating Docker network: ${BACKEND_NETWORK} ---"
              docker network create "${BACKEND_NETWORK}" || true
            else
              echo "--- Network ${BACKEND_NETWORK} already exists ---"
            fi
            
            # Создаем директории, если их еще нет
            echo "--- Creating directory structure ---"
            mkdir -p /docker/nginx/vhost.d
            mkdir -p /docker/nginx/html
            mkdir -p /docker/nginx/certs
            
            echo "--- Validating compose file ---"
            docker compose -f docker-compose-nginx.yml config
            
            echo "--- Starting/updating Nginx and SSL containers ---"
            docker compose -f docker-compose-nginx.yml up -d --force-recreate

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (production)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: elenasoshina/web_studio:latest
          target: production
          build-args: |
            BASE_PATH=/
            EMAILJS_SERVICE_ID=${{ secrets.EMAILJS_SERVICE_ID }}
            EMAILJS_TEMPLATE_ID=${{ secrets.EMAILJS_TEMPLATE_ID }}
            EMAILJS_PUBLIC_KEY=${{ secrets.EMAILJS_PUBLIC_KEY }}

      - name: Copy compose file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key:      ${{ secrets.SERVER_SSH_KEY }}
          port:     22
          source:   docker/docker-compose-app.yml
          target:   /docker
          strip_components: 1

      - name: Deploy and verify webapp
        uses: appleboy/ssh-action@master
        env:
          BACKEND_NETWORK:  ${{ env.BACKEND_NETWORK }}
          VIRTUAL_HOST:     ${{ env.VIRTUAL_HOST }}
          LETSENCRYPT_HOST: ${{ env.LETSENCRYPT_HOST }}
          LETSENCRYPT_EMAIL: ${{ env.LETSENCRYPT_EMAIL }}
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key:      ${{ secrets.SERVER_SSH_KEY }}
          port:     22
          envs: |
            BACKEND_NETWORK,
            VIRTUAL_HOST,
            LETSENCRYPT_HOST,
            LETSENCRYPT_EMAIL
          script: |
            set -euo pipefail
            cd /docker
            
            echo "--- Validating compose file ---"
            docker compose -f docker-compose-app.yml config
            
            echo "--- Pulling latest image ---"
            docker compose -f docker-compose-app.yml pull || true
            
            echo "--- Starting/updating webapp ---"
            docker compose -f docker-compose-app.yml up -d --force-recreate
            
            echo "--- All running containers ---"
            docker ps
